<?php
/**
 * V2UserChannelCatalogsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BeezUP API
 *
 * This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * V2UserChannelCatalogsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V2UserChannelCatalogsApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return V2UserChannelCatalogsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation configureChannelCatalogCostSettings
     *
     * Disable a channel catalog
     *
     * @param string $channel_catalog_id The channel catalog identifier (required)
     * @param \Swagger\Client\Model\CostSettings $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function configureChannelCatalogCostSettings($channel_catalog_id, $request)
    {
        list($response) = $this->configureChannelCatalogCostSettingsWithHttpInfo($channel_catalog_id, $request);
        return $response;
    }

    /**
     * Operation configureChannelCatalogCostSettingsWithHttpInfo
     *
     * Disable a channel catalog
     *
     * @param string $channel_catalog_id The channel catalog identifier (required)
     * @param \Swagger\Client\Model\CostSettings $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function configureChannelCatalogCostSettingsWithHttpInfo($channel_catalog_id, $request)
    {
        // verify the required parameter 'channel_catalog_id' is set
        if ($channel_catalog_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $channel_catalog_id when calling configureChannelCatalogCostSettings');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling configureChannelCatalogCostSettings');
        }
        // parse inputs
        $resourcePath = "/v2/user/channelCatalogs/{channelCatalogId}/settings/cost";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($channel_catalog_id !== null) {
            $resourcePath = str_replace(
                "{" . "channelCatalogId" . "}",
                $this->apiClient->getSerializer()->toPathValue($channel_catalog_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/channelCatalogs/{channelCatalogId}/settings/cost'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation configureChannelCatalogExclusionFilters
     *
     * Configure channel catalog exclusion filters
     *
     * @param string $channel_catalog_id The channel catalog identifier (required)
     * @param \Swagger\Client\Model\ExclusionFilters $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function configureChannelCatalogExclusionFilters($channel_catalog_id, $request)
    {
        list($response) = $this->configureChannelCatalogExclusionFiltersWithHttpInfo($channel_catalog_id, $request);
        return $response;
    }

    /**
     * Operation configureChannelCatalogExclusionFiltersWithHttpInfo
     *
     * Configure channel catalog exclusion filters
     *
     * @param string $channel_catalog_id The channel catalog identifier (required)
     * @param \Swagger\Client\Model\ExclusionFilters $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function configureChannelCatalogExclusionFiltersWithHttpInfo($channel_catalog_id, $request)
    {
        // verify the required parameter 'channel_catalog_id' is set
        if ($channel_catalog_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $channel_catalog_id when calling configureChannelCatalogExclusionFilters');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling configureChannelCatalogExclusionFilters');
        }
        // parse inputs
        $resourcePath = "/v2/user/channelCatalogs/{channelCatalogId}/exclusionFilters";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($channel_catalog_id !== null) {
            $resourcePath = str_replace(
                "{" . "channelCatalogId" . "}",
                $this->apiClient->getSerializer()->toPathValue($channel_catalog_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/channelCatalogs/{channelCatalogId}/exclusionFilters'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation configureChannelCatalogGeneralSettings
     *
     * Disable a channel catalog
     *
     * @param string $channel_catalog_id The channel catalog identifier (required)
     * @param \Swagger\Client\Model\GeneralSettings $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function configureChannelCatalogGeneralSettings($channel_catalog_id, $request)
    {
        list($response) = $this->configureChannelCatalogGeneralSettingsWithHttpInfo($channel_catalog_id, $request);
        return $response;
    }

    /**
     * Operation configureChannelCatalogGeneralSettingsWithHttpInfo
     *
     * Disable a channel catalog
     *
     * @param string $channel_catalog_id The channel catalog identifier (required)
     * @param \Swagger\Client\Model\GeneralSettings $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function configureChannelCatalogGeneralSettingsWithHttpInfo($channel_catalog_id, $request)
    {
        // verify the required parameter 'channel_catalog_id' is set
        if ($channel_catalog_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $channel_catalog_id when calling configureChannelCatalogGeneralSettings');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling configureChannelCatalogGeneralSettings');
        }
        // parse inputs
        $resourcePath = "/v2/user/channelCatalogs/{channelCatalogId}/settings/general";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($channel_catalog_id !== null) {
            $resourcePath = str_replace(
                "{" . "channelCatalogId" . "}",
                $this->apiClient->getSerializer()->toPathValue($channel_catalog_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/channelCatalogs/{channelCatalogId}/settings/general'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation createChannelCatalog
     *
     * Create a new channel catalog
     *
     * @param \Swagger\Client\Model\CreateChannelCatalogRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\BeezUPCommonLink2[]
     */
    public function createChannelCatalog($request)
    {
        list($response) = $this->createChannelCatalogWithHttpInfo($request);
        return $response;
    }

    /**
     * Operation createChannelCatalogWithHttpInfo
     *
     * Create a new channel catalog
     *
     * @param \Swagger\Client\Model\CreateChannelCatalogRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\BeezUPCommonLink2[], HTTP status code, HTTP response headers (array of strings)
     */
    public function createChannelCatalogWithHttpInfo($request)
    {
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling createChannelCatalog');
        }
        // parse inputs
        $resourcePath = "/v2/user/channelCatalogs/";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\BeezUPCommonLink2[]',
                '/v2/user/channelCatalogs/'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\BeezUPCommonLink2[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonLink2[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation deleteChannelCatalog
     *
     * Delete the channel catalog
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function deleteChannelCatalog()
    {
        list($response) = $this->deleteChannelCatalogWithHttpInfo();
        return $response;
    }

    /**
     * Operation deleteChannelCatalogWithHttpInfo
     *
     * Delete the channel catalog
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteChannelCatalogWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/v2/user/channelCatalogs/{channelCatalogId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/channelCatalogs/{channelCatalogId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation deleteChannelCatalogProductValueOverride
     *
     * Delete a specific channel catalog product value override
     *
     * @param string $channel_catalog_id The channel catalog identifier (required)
     * @param string $product_id The product identifier (required)
     * @param string $channel_column_id The channel column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function deleteChannelCatalogProductValueOverride($channel_catalog_id, $product_id, $channel_column_id)
    {
        list($response) = $this->deleteChannelCatalogProductValueOverrideWithHttpInfo($channel_catalog_id, $product_id, $channel_column_id);
        return $response;
    }

    /**
     * Operation deleteChannelCatalogProductValueOverrideWithHttpInfo
     *
     * Delete a specific channel catalog product value override
     *
     * @param string $channel_catalog_id The channel catalog identifier (required)
     * @param string $product_id The product identifier (required)
     * @param string $channel_column_id The channel column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteChannelCatalogProductValueOverrideWithHttpInfo($channel_catalog_id, $product_id, $channel_column_id)
    {
        // verify the required parameter 'channel_catalog_id' is set
        if ($channel_catalog_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $channel_catalog_id when calling deleteChannelCatalogProductValueOverride');
        }
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling deleteChannelCatalogProductValueOverride');
        }
        // verify the required parameter 'channel_column_id' is set
        if ($channel_column_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $channel_column_id when calling deleteChannelCatalogProductValueOverride');
        }
        // parse inputs
        $resourcePath = "/v2/user/channelCatalogs/{channelCatalogId}/products/{productId}/overrides/{channelColumnId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($channel_catalog_id !== null) {
            $resourcePath = str_replace(
                "{" . "channelCatalogId" . "}",
                $this->apiClient->getSerializer()->toPathValue($channel_catalog_id),
                $resourcePath
            );
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "productId" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // path params
        if ($channel_column_id !== null) {
            $resourcePath = str_replace(
                "{" . "channelColumnId" . "}",
                $this->apiClient->getSerializer()->toPathValue($channel_column_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/channelCatalogs/{channelCatalogId}/products/{productId}/overrides/{channelColumnId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation disableChannelCatalog
     *
     * Disable a channel catalog
     *
     * @param string $channel_catalog_id The channel catalog identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function disableChannelCatalog($channel_catalog_id)
    {
        list($response) = $this->disableChannelCatalogWithHttpInfo($channel_catalog_id);
        return $response;
    }

    /**
     * Operation disableChannelCatalogWithHttpInfo
     *
     * Disable a channel catalog
     *
     * @param string $channel_catalog_id The channel catalog identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function disableChannelCatalogWithHttpInfo($channel_catalog_id)
    {
        // verify the required parameter 'channel_catalog_id' is set
        if ($channel_catalog_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $channel_catalog_id when calling disableChannelCatalog');
        }
        // parse inputs
        $resourcePath = "/v2/user/channelCatalogs/{channelCatalogId}/disable";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($channel_catalog_id !== null) {
            $resourcePath = str_replace(
                "{" . "channelCatalogId" . "}",
                $this->apiClient->getSerializer()->toPathValue($channel_catalog_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/channelCatalogs/{channelCatalogId}/disable'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation disableChannelCatalogProduct
     *
     * Disable channel catalog product
     *
     * @param string $channel_catalog_id The channel catalog identifier (required)
     * @param string $product_id The product identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function disableChannelCatalogProduct($channel_catalog_id, $product_id)
    {
        list($response) = $this->disableChannelCatalogProductWithHttpInfo($channel_catalog_id, $product_id);
        return $response;
    }

    /**
     * Operation disableChannelCatalogProductWithHttpInfo
     *
     * Disable channel catalog product
     *
     * @param string $channel_catalog_id The channel catalog identifier (required)
     * @param string $product_id The product identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function disableChannelCatalogProductWithHttpInfo($channel_catalog_id, $product_id)
    {
        // verify the required parameter 'channel_catalog_id' is set
        if ($channel_catalog_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $channel_catalog_id when calling disableChannelCatalogProduct');
        }
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling disableChannelCatalogProduct');
        }
        // parse inputs
        $resourcePath = "/v2/user/channelCatalogs/{channelCatalogId}/products/{productId}/disable";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($channel_catalog_id !== null) {
            $resourcePath = str_replace(
                "{" . "channelCatalogId" . "}",
                $this->apiClient->getSerializer()->toPathValue($channel_catalog_id),
                $resourcePath
            );
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "productId" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/channelCatalogs/{channelCatalogId}/products/{productId}/disable'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation enableChannelCatalog
     *
     * Enable a channel catalog
     *
     * @param string $channel_catalog_id The channel catalog identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function enableChannelCatalog($channel_catalog_id)
    {
        list($response) = $this->enableChannelCatalogWithHttpInfo($channel_catalog_id);
        return $response;
    }

    /**
     * Operation enableChannelCatalogWithHttpInfo
     *
     * Enable a channel catalog
     *
     * @param string $channel_catalog_id The channel catalog identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function enableChannelCatalogWithHttpInfo($channel_catalog_id)
    {
        // verify the required parameter 'channel_catalog_id' is set
        if ($channel_catalog_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $channel_catalog_id when calling enableChannelCatalog');
        }
        // parse inputs
        $resourcePath = "/v2/user/channelCatalogs/{channelCatalogId}/enable";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($channel_catalog_id !== null) {
            $resourcePath = str_replace(
                "{" . "channelCatalogId" . "}",
                $this->apiClient->getSerializer()->toPathValue($channel_catalog_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/channelCatalogs/{channelCatalogId}/enable'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 402:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\UpgradeOfferRequired', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getChannelCatalog
     *
     * Get the channel catalog information
     *
     * @param string $channel_catalog_id The channel catalog identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ChannelCatalog
     */
    public function getChannelCatalog($channel_catalog_id)
    {
        list($response) = $this->getChannelCatalogWithHttpInfo($channel_catalog_id);
        return $response;
    }

    /**
     * Operation getChannelCatalogWithHttpInfo
     *
     * Get the channel catalog information
     *
     * @param string $channel_catalog_id The channel catalog identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ChannelCatalog, HTTP status code, HTTP response headers (array of strings)
     */
    public function getChannelCatalogWithHttpInfo($channel_catalog_id)
    {
        // verify the required parameter 'channel_catalog_id' is set
        if ($channel_catalog_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $channel_catalog_id when calling getChannelCatalog');
        }
        // parse inputs
        $resourcePath = "/v2/user/channelCatalogs/{channelCatalogId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($channel_catalog_id !== null) {
            $resourcePath = str_replace(
                "{" . "channelCatalogId" . "}",
                $this->apiClient->getSerializer()->toPathValue($channel_catalog_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ChannelCatalog',
                '/v2/user/channelCatalogs/{channelCatalogId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ChannelCatalog', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ChannelCatalog', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getChannelCatalogCategories
     *
     * Get channel catalog categories
     *
     * @param string $channel_catalog_id The channel catalog identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ChannelCatalogCategoryMappings
     */
    public function getChannelCatalogCategories($channel_catalog_id)
    {
        list($response) = $this->getChannelCatalogCategoriesWithHttpInfo($channel_catalog_id);
        return $response;
    }

    /**
     * Operation getChannelCatalogCategoriesWithHttpInfo
     *
     * Get channel catalog categories
     *
     * @param string $channel_catalog_id The channel catalog identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ChannelCatalogCategoryMappings, HTTP status code, HTTP response headers (array of strings)
     */
    public function getChannelCatalogCategoriesWithHttpInfo($channel_catalog_id)
    {
        // verify the required parameter 'channel_catalog_id' is set
        if ($channel_catalog_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $channel_catalog_id when calling getChannelCatalogCategories');
        }
        // parse inputs
        $resourcePath = "/v2/user/channelCatalogs/{channelCatalogId}/categoryMappings";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($channel_catalog_id !== null) {
            $resourcePath = str_replace(
                "{" . "channelCatalogId" . "}",
                $this->apiClient->getSerializer()->toPathValue($channel_catalog_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ChannelCatalogCategoryMappings',
                '/v2/user/channelCatalogs/{channelCatalogId}/categoryMappings'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ChannelCatalogCategoryMappings', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ChannelCatalogCategoryMappings', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getChannelCatalogExclusionFilterOperators
     *
     * Get channel catalog exclusion filter operators
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ExclusionFilterOperator[]
     */
    public function getChannelCatalogExclusionFilterOperators()
    {
        list($response) = $this->getChannelCatalogExclusionFilterOperatorsWithHttpInfo();
        return $response;
    }

    /**
     * Operation getChannelCatalogExclusionFilterOperatorsWithHttpInfo
     *
     * Get channel catalog exclusion filter operators
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ExclusionFilterOperator[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getChannelCatalogExclusionFilterOperatorsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/v2/user/channelCatalogs/exclusionFilterOperators";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ExclusionFilterOperator[]',
                '/v2/user/channelCatalogs/exclusionFilterOperators'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ExclusionFilterOperator[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ExclusionFilterOperator[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getChannelCatalogProductInfo
     *
     * Get channel catalog product information
     *
     * @param string $channel_catalog_id The channel catalog identifier (required)
     * @param string $product_id The product identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ChannelCatalogProductInfo
     */
    public function getChannelCatalogProductInfo($channel_catalog_id, $product_id)
    {
        list($response) = $this->getChannelCatalogProductInfoWithHttpInfo($channel_catalog_id, $product_id);
        return $response;
    }

    /**
     * Operation getChannelCatalogProductInfoWithHttpInfo
     *
     * Get channel catalog product information
     *
     * @param string $channel_catalog_id The channel catalog identifier (required)
     * @param string $product_id The product identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ChannelCatalogProductInfo, HTTP status code, HTTP response headers (array of strings)
     */
    public function getChannelCatalogProductInfoWithHttpInfo($channel_catalog_id, $product_id)
    {
        // verify the required parameter 'channel_catalog_id' is set
        if ($channel_catalog_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $channel_catalog_id when calling getChannelCatalogProductInfo');
        }
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling getChannelCatalogProductInfo');
        }
        // parse inputs
        $resourcePath = "/v2/user/channelCatalogs/{channelCatalogId}/products/{productId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($channel_catalog_id !== null) {
            $resourcePath = str_replace(
                "{" . "channelCatalogId" . "}",
                $this->apiClient->getSerializer()->toPathValue($channel_catalog_id),
                $resourcePath
            );
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "productId" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ChannelCatalogProductInfo',
                '/v2/user/channelCatalogs/{channelCatalogId}/products/{productId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ChannelCatalogProductInfo', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ChannelCatalogProductInfo', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getChannelCatalogProductInfoList
     *
     * Get channel catalog product information list
     *
     * @param string $channel_catalog_id The channel catalog identifier (required)
     * @param \Swagger\Client\Model\GetChannelCatalogProductInfoListRequest $request The channel catalog product list filter (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ChannelCatalogProductInfoList
     */
    public function getChannelCatalogProductInfoList($channel_catalog_id, $request = null)
    {
        list($response) = $this->getChannelCatalogProductInfoListWithHttpInfo($channel_catalog_id, $request);
        return $response;
    }

    /**
     * Operation getChannelCatalogProductInfoListWithHttpInfo
     *
     * Get channel catalog product information list
     *
     * @param string $channel_catalog_id The channel catalog identifier (required)
     * @param \Swagger\Client\Model\GetChannelCatalogProductInfoListRequest $request The channel catalog product list filter (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ChannelCatalogProductInfoList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getChannelCatalogProductInfoListWithHttpInfo($channel_catalog_id, $request = null)
    {
        // verify the required parameter 'channel_catalog_id' is set
        if ($channel_catalog_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $channel_catalog_id when calling getChannelCatalogProductInfoList');
        }
        // parse inputs
        $resourcePath = "/v2/user/channelCatalogs/{channelCatalogId}/products";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($channel_catalog_id !== null) {
            $resourcePath = str_replace(
                "{" . "channelCatalogId" . "}",
                $this->apiClient->getSerializer()->toPathValue($channel_catalog_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ChannelCatalogProductInfoList',
                '/v2/user/channelCatalogs/{channelCatalogId}/products'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ChannelCatalogProductInfoList', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ChannelCatalogProductInfoList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation getChannelCatalogs
     *
     * List all your current channel catalogs
     *
     * @param string $store_id The store identifier (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ChannelCatalogList
     */
    public function getChannelCatalogs($store_id = null)
    {
        list($response) = $this->getChannelCatalogsWithHttpInfo($store_id);
        return $response;
    }

    /**
     * Operation getChannelCatalogsWithHttpInfo
     *
     * List all your current channel catalogs
     *
     * @param string $store_id The store identifier (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ChannelCatalogList, HTTP status code, HTTP response headers (array of strings)
     */
    public function getChannelCatalogsWithHttpInfo($store_id = null)
    {
        // parse inputs
        $resourcePath = "/v2/user/channelCatalogs/";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($store_id !== null) {
            $queryParams['storeId'] = $this->apiClient->getSerializer()->toQueryValue($store_id);
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ChannelCatalogList',
                '/v2/user/channelCatalogs/'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ChannelCatalogList', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ChannelCatalogList', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation mapChannelCatalogCategory
     *
     * Map channel catalog category
     *
     * @param string $channel_catalog_id The channel catalog identifier (required)
     * @param \Swagger\Client\Model\MapCategoryRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function mapChannelCatalogCategory($channel_catalog_id, $request)
    {
        list($response) = $this->mapChannelCatalogCategoryWithHttpInfo($channel_catalog_id, $request);
        return $response;
    }

    /**
     * Operation mapChannelCatalogCategoryWithHttpInfo
     *
     * Map channel catalog category
     *
     * @param string $channel_catalog_id The channel catalog identifier (required)
     * @param \Swagger\Client\Model\MapCategoryRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function mapChannelCatalogCategoryWithHttpInfo($channel_catalog_id, $request)
    {
        // verify the required parameter 'channel_catalog_id' is set
        if ($channel_catalog_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $channel_catalog_id when calling mapChannelCatalogCategory');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling mapChannelCatalogCategory');
        }
        // parse inputs
        $resourcePath = "/v2/user/channelCatalogs/{channelCatalogId}/categoryMappings/map";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($channel_catalog_id !== null) {
            $resourcePath = str_replace(
                "{" . "channelCatalogId" . "}",
                $this->apiClient->getSerializer()->toPathValue($channel_catalog_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/channelCatalogs/{channelCatalogId}/categoryMappings/map'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation mapChannelCatalogColumns
     *
     * Configure channel catalog column mappings
     *
     * @param string $channel_catalog_id The channel catalog identifier (required)
     * @param \Swagger\Client\Model\ColumnMappingList $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function mapChannelCatalogColumns($channel_catalog_id, $request)
    {
        list($response) = $this->mapChannelCatalogColumnsWithHttpInfo($channel_catalog_id, $request);
        return $response;
    }

    /**
     * Operation mapChannelCatalogColumnsWithHttpInfo
     *
     * Configure channel catalog column mappings
     *
     * @param string $channel_catalog_id The channel catalog identifier (required)
     * @param \Swagger\Client\Model\ColumnMappingList $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function mapChannelCatalogColumnsWithHttpInfo($channel_catalog_id, $request)
    {
        // verify the required parameter 'channel_catalog_id' is set
        if ($channel_catalog_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $channel_catalog_id when calling mapChannelCatalogColumns');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling mapChannelCatalogColumns');
        }
        // parse inputs
        $resourcePath = "/v2/user/channelCatalogs/{channelCatalogId}/columnMappings";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($channel_catalog_id !== null) {
            $resourcePath = str_replace(
                "{" . "channelCatalogId" . "}",
                $this->apiClient->getSerializer()->toPathValue($channel_catalog_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/channelCatalogs/{channelCatalogId}/columnMappings'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation overrideChannelCatalogProductOverrides
     *
     * Override channel catalog product values
     *
     * @param string $channel_catalog_id The channel catalog identifier (required)
     * @param string $product_id The product identifier (required)
     * @param \Swagger\Client\Model\ProductOverrides $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function overrideChannelCatalogProductOverrides($channel_catalog_id, $product_id, $request)
    {
        list($response) = $this->overrideChannelCatalogProductOverridesWithHttpInfo($channel_catalog_id, $product_id, $request);
        return $response;
    }

    /**
     * Operation overrideChannelCatalogProductOverridesWithHttpInfo
     *
     * Override channel catalog product values
     *
     * @param string $channel_catalog_id The channel catalog identifier (required)
     * @param string $product_id The product identifier (required)
     * @param \Swagger\Client\Model\ProductOverrides $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function overrideChannelCatalogProductOverridesWithHttpInfo($channel_catalog_id, $product_id, $request)
    {
        // verify the required parameter 'channel_catalog_id' is set
        if ($channel_catalog_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $channel_catalog_id when calling overrideChannelCatalogProductOverrides');
        }
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling overrideChannelCatalogProductOverrides');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling overrideChannelCatalogProductOverrides');
        }
        // parse inputs
        $resourcePath = "/v2/user/channelCatalogs/{channelCatalogId}/products/{productId}/overrides";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($channel_catalog_id !== null) {
            $resourcePath = str_replace(
                "{" . "channelCatalogId" . "}",
                $this->apiClient->getSerializer()->toPathValue($channel_catalog_id),
                $resourcePath
            );
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "productId" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/channelCatalogs/{channelCatalogId}/products/{productId}/overrides'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation reenableChannelCatalogProduct
     *
     * Reenable channel catalog product
     *
     * @param string $channel_catalog_id The channel catalog identifier (required)
     * @param string $product_id The product identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function reenableChannelCatalogProduct($channel_catalog_id, $product_id)
    {
        list($response) = $this->reenableChannelCatalogProductWithHttpInfo($channel_catalog_id, $product_id);
        return $response;
    }

    /**
     * Operation reenableChannelCatalogProductWithHttpInfo
     *
     * Reenable channel catalog product
     *
     * @param string $channel_catalog_id The channel catalog identifier (required)
     * @param string $product_id The product identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function reenableChannelCatalogProductWithHttpInfo($channel_catalog_id, $product_id)
    {
        // verify the required parameter 'channel_catalog_id' is set
        if ($channel_catalog_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $channel_catalog_id when calling reenableChannelCatalogProduct');
        }
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling reenableChannelCatalogProduct');
        }
        // parse inputs
        $resourcePath = "/v2/user/channelCatalogs/{channelCatalogId}/products/{productId}/reenable";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($channel_catalog_id !== null) {
            $resourcePath = str_replace(
                "{" . "channelCatalogId" . "}",
                $this->apiClient->getSerializer()->toPathValue($channel_catalog_id),
                $resourcePath
            );
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "productId" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/channelCatalogs/{channelCatalogId}/products/{productId}/reenable'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation unmapChannelCatalogCategory
     *
     * Unmap channel catalog category
     *
     * @param string $channel_catalog_id The channel catalog identifier (required)
     * @param \Swagger\Client\Model\UnmapCategoryRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function unmapChannelCatalogCategory($channel_catalog_id, $request)
    {
        list($response) = $this->unmapChannelCatalogCategoryWithHttpInfo($channel_catalog_id, $request);
        return $response;
    }

    /**
     * Operation unmapChannelCatalogCategoryWithHttpInfo
     *
     * Unmap channel catalog category
     *
     * @param string $channel_catalog_id The channel catalog identifier (required)
     * @param \Swagger\Client\Model\UnmapCategoryRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function unmapChannelCatalogCategoryWithHttpInfo($channel_catalog_id, $request)
    {
        // verify the required parameter 'channel_catalog_id' is set
        if ($channel_catalog_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $channel_catalog_id when calling unmapChannelCatalogCategory');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling unmapChannelCatalogCategory');
        }
        // parse inputs
        $resourcePath = "/v2/user/channelCatalogs/{channelCatalogId}/categoryMappings/unmap";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($channel_catalog_id !== null) {
            $resourcePath = str_replace(
                "{" . "channelCatalogId" . "}",
                $this->apiClient->getSerializer()->toPathValue($channel_catalog_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/channelCatalogs/{channelCatalogId}/categoryMappings/unmap'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }
}
