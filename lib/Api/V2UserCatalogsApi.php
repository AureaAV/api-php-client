<?php
/**
 * V2UserCatalogsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * BeezUP API
 *
 * This is the RESTful API of BeezUP which allows you to manage everything related to BeezUP
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use \Swagger\Client\ApiClient;
use \Swagger\Client\ApiException;
use \Swagger\Client\Configuration;
use \Swagger\Client\ObjectSerializer;

/**
 * V2UserCatalogsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class V2UserCatalogsApi
{
    /**
     * API Client
     *
     * @var \Swagger\Client\ApiClient instance of the ApiClient
     */
    protected $apiClient;

    /**
     * Constructor
     *
     * @param \Swagger\Client\ApiClient|null $apiClient The api client to use
     */
    public function __construct(\Swagger\Client\ApiClient $apiClient = null)
    {
        if ($apiClient === null) {
            $apiClient = new ApiClient();
        }

        $this->apiClient = $apiClient;
    }

    /**
     * Get API client
     *
     * @return \Swagger\Client\ApiClient get the API client
     */
    public function getApiClient()
    {
        return $this->apiClient;
    }

    /**
     * Set the API client
     *
     * @param \Swagger\Client\ApiClient $apiClient set the API client
     *
     * @return V2UserCatalogsApi
     */
    public function setApiClient(\Swagger\Client\ApiClient $apiClient)
    {
        $this->apiClient = $apiClient;
        return $this;
    }

    /**
     * Operation autoConfigureAutoImportInterval
     *
     * Configure Auto Import Interval
     *
     * @param string $store_id Your store identifier (required)
     * @param \Swagger\Client\Model\ConfigureAutoImportIntervalRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function autoConfigureAutoImportInterval($store_id, $request)
    {
        list($response) = $this->autoConfigureAutoImportIntervalWithHttpInfo($store_id, $request);
        return $response;
    }

    /**
     * Operation autoConfigureAutoImportIntervalWithHttpInfo
     *
     * Configure Auto Import Interval
     *
     * @param string $store_id Your store identifier (required)
     * @param \Swagger\Client\Model\ConfigureAutoImportIntervalRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function autoConfigureAutoImportIntervalWithHttpInfo($store_id, $request)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling autoConfigureAutoImportInterval');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling autoConfigureAutoImportInterval');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/autoImport/scheduling/interval";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/autoImport/scheduling/interval'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation autoDeleteAutoImport
     *
     * Delete Auto Import
     *
     * @param string $store_id Your store identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function autoDeleteAutoImport($store_id)
    {
        list($response) = $this->autoDeleteAutoImportWithHttpInfo($store_id);
        return $response;
    }

    /**
     * Operation autoDeleteAutoImportWithHttpInfo
     *
     * Delete Auto Import
     *
     * @param string $store_id Your store identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function autoDeleteAutoImportWithHttpInfo($store_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling autoDeleteAutoImport');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/autoImport";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/autoImport'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation autoGetAutoImportConfiguration
     *
     * Get the auto import configuration
     *
     * @param string $store_id Your store identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\AutoImportConfiguration
     */
    public function autoGetAutoImportConfiguration($store_id)
    {
        list($response) = $this->autoGetAutoImportConfigurationWithHttpInfo($store_id);
        return $response;
    }

    /**
     * Operation autoGetAutoImportConfigurationWithHttpInfo
     *
     * Get the auto import configuration
     *
     * @param string $store_id Your store identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\AutoImportConfiguration, HTTP status code, HTTP response headers (array of strings)
     */
    public function autoGetAutoImportConfigurationWithHttpInfo($store_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling autoGetAutoImportConfiguration');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/autoImport";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\AutoImportConfiguration',
                '/v2/user/catalogs/{storeId}/autoImport'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\AutoImportConfiguration', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\AutoImportConfiguration', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation autoPauseAutoImport
     *
     * Pause Auto Import
     *
     * @param string $store_id Your store identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function autoPauseAutoImport($store_id)
    {
        list($response) = $this->autoPauseAutoImportWithHttpInfo($store_id);
        return $response;
    }

    /**
     * Operation autoPauseAutoImportWithHttpInfo
     *
     * Pause Auto Import
     *
     * @param string $store_id Your store identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function autoPauseAutoImportWithHttpInfo($store_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling autoPauseAutoImport');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/autoImport/pause";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/autoImport/pause'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation autoResumeAutoImport
     *
     * Resume Auto Import
     *
     * @param string $store_id Your store identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function autoResumeAutoImport($store_id)
    {
        list($response) = $this->autoResumeAutoImportWithHttpInfo($store_id);
        return $response;
    }

    /**
     * Operation autoResumeAutoImportWithHttpInfo
     *
     * Resume Auto Import
     *
     * @param string $store_id Your store identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function autoResumeAutoImportWithHttpInfo($store_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling autoResumeAutoImport');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/autoImport/resume";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/autoImport/resume'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation autoScheduleAutoImport
     *
     * Configure Auto Import Schedules
     *
     * @param string $store_id Your store identifier (required)
     * @param \Swagger\Client\Model\ScheduleAutoImportRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function autoScheduleAutoImport($store_id, $request)
    {
        list($response) = $this->autoScheduleAutoImportWithHttpInfo($store_id, $request);
        return $response;
    }

    /**
     * Operation autoScheduleAutoImportWithHttpInfo
     *
     * Configure Auto Import Schedules
     *
     * @param string $store_id Your store identifier (required)
     * @param \Swagger\Client\Model\ScheduleAutoImportRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function autoScheduleAutoImportWithHttpInfo($store_id, $request)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling autoScheduleAutoImport');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling autoScheduleAutoImport');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/autoImport/scheduling/schedules";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/autoImport/scheduling/schedules'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation autoStartAutoImport
     *
     * Start Auto Import Manually
     *
     * @param string $store_id Your store identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\BeezUPCommonLink2[]
     */
    public function autoStartAutoImport($store_id)
    {
        list($response) = $this->autoStartAutoImportWithHttpInfo($store_id);
        return $response;
    }

    /**
     * Operation autoStartAutoImportWithHttpInfo
     *
     * Start Auto Import Manually
     *
     * @param string $store_id Your store identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\BeezUPCommonLink2[], HTTP status code, HTTP response headers (array of strings)
     */
    public function autoStartAutoImportWithHttpInfo($store_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling autoStartAutoImport');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/autoImport/start";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\BeezUPCommonLink2[]',
                '/v2/user/catalogs/{storeId}/autoImport/start'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\BeezUPCommonLink2[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonLink2[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation catalogChangeCatalogColumnUserName
     *
     * Change Catalog Column User Name
     *
     * @param string $store_id Your store identifier (required)
     * @param string $column_id The catalog column identifier (required)
     * @param \Swagger\Client\Model\ChangeUserColumnNameRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function catalogChangeCatalogColumnUserName($store_id, $column_id, $request)
    {
        list($response) = $this->catalogChangeCatalogColumnUserNameWithHttpInfo($store_id, $column_id, $request);
        return $response;
    }

    /**
     * Operation catalogChangeCatalogColumnUserNameWithHttpInfo
     *
     * Change Catalog Column User Name
     *
     * @param string $store_id Your store identifier (required)
     * @param string $column_id The catalog column identifier (required)
     * @param \Swagger\Client\Model\ChangeUserColumnNameRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogChangeCatalogColumnUserNameWithHttpInfo($store_id, $column_id, $request)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling catalogChangeCatalogColumnUserName');
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $column_id when calling catalogChangeCatalogColumnUserName');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling catalogChangeCatalogColumnUserName');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/catalogColumns/{columnId}/rename";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                "{" . "columnId" . "}",
                $this->apiClient->getSerializer()->toPathValue($column_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/catalogColumns/{columnId}/rename'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse409', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation catalogChangeCustomColumnExpression
     *
     * Change custom column expression
     *
     * @param string $store_id Your store identifier (required)
     * @param string $column_id The custom column identifier (required)
     * @param \Swagger\Client\Model\ChangeCustomColumnExpressionRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function catalogChangeCustomColumnExpression($store_id, $column_id, $request)
    {
        list($response) = $this->catalogChangeCustomColumnExpressionWithHttpInfo($store_id, $column_id, $request);
        return $response;
    }

    /**
     * Operation catalogChangeCustomColumnExpressionWithHttpInfo
     *
     * Change custom column expression
     *
     * @param string $store_id Your store identifier (required)
     * @param string $column_id The custom column identifier (required)
     * @param \Swagger\Client\Model\ChangeCustomColumnExpressionRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogChangeCustomColumnExpressionWithHttpInfo($store_id, $column_id, $request)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling catalogChangeCustomColumnExpression');
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $column_id when calling catalogChangeCustomColumnExpression');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling catalogChangeCustomColumnExpression');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/customColumns/{columnId}/expression";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                "{" . "columnId" . "}",
                $this->apiClient->getSerializer()->toPathValue($column_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/customColumns/{columnId}/expression'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse409', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation catalogChangeCustomColumnUserName
     *
     * Change Custom Column User Name
     *
     * @param string $store_id Your store identifier (required)
     * @param string $column_id The custom column identifier (required)
     * @param \Swagger\Client\Model\ChangeUserColumnNameRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function catalogChangeCustomColumnUserName($store_id, $column_id, $request)
    {
        list($response) = $this->catalogChangeCustomColumnUserNameWithHttpInfo($store_id, $column_id, $request);
        return $response;
    }

    /**
     * Operation catalogChangeCustomColumnUserNameWithHttpInfo
     *
     * Change Custom Column User Name
     *
     * @param string $store_id Your store identifier (required)
     * @param string $column_id The custom column identifier (required)
     * @param \Swagger\Client\Model\ChangeUserColumnNameRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogChangeCustomColumnUserNameWithHttpInfo($store_id, $column_id, $request)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling catalogChangeCustomColumnUserName');
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $column_id when calling catalogChangeCustomColumnUserName');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling catalogChangeCustomColumnUserName');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/customColumns/{columnId}/rename";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                "{" . "columnId" . "}",
                $this->apiClient->getSerializer()->toPathValue($column_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/customColumns/{columnId}/rename'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse409', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation catalogComputeExpression
     *
     * Compute the expression for this catalog.
     *
     * @param string $store_id Your store identifier (required)
     * @param \Swagger\Client\Model\ComputeExpressionRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function catalogComputeExpression($store_id, $request)
    {
        list($response) = $this->catalogComputeExpressionWithHttpInfo($store_id, $request);
        return $response;
    }

    /**
     * Operation catalogComputeExpressionWithHttpInfo
     *
     * Compute the expression for this catalog.
     *
     * @param string $store_id Your store identifier (required)
     * @param \Swagger\Client\Model\ComputeExpressionRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogComputeExpressionWithHttpInfo($store_id, $request)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling catalogComputeExpression');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling catalogComputeExpression');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/customColumns/computeExpression";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/v2/user/catalogs/{storeId}/customColumns/computeExpression'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation catalogDeleteCustomColumn
     *
     * Delete custom column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $column_id The custom column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function catalogDeleteCustomColumn($store_id, $column_id)
    {
        list($response) = $this->catalogDeleteCustomColumnWithHttpInfo($store_id, $column_id);
        return $response;
    }

    /**
     * Operation catalogDeleteCustomColumnWithHttpInfo
     *
     * Delete custom column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $column_id The custom column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogDeleteCustomColumnWithHttpInfo($store_id, $column_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling catalogDeleteCustomColumn');
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $column_id when calling catalogDeleteCustomColumn');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/customColumns/{columnId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                "{" . "columnId" . "}",
                $this->apiClient->getSerializer()->toPathValue($column_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/customColumns/{columnId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation catalogGetBeezUPColumns
     *
     * Get the BeezUP columns
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\BeezUPColumnConfiguration[]
     */
    public function catalogGetBeezUPColumns()
    {
        list($response) = $this->catalogGetBeezUPColumnsWithHttpInfo();
        return $response;
    }

    /**
     * Operation catalogGetBeezUPColumnsWithHttpInfo
     *
     * Get the BeezUP columns
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\BeezUPColumnConfiguration[], HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogGetBeezUPColumnsWithHttpInfo()
    {
        // parse inputs
        $resourcePath = "/v2/user/catalogs/beezupColumns";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\BeezUPColumnConfiguration[]',
                '/v2/user/catalogs/beezupColumns'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\BeezUPColumnConfiguration[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPColumnConfiguration[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation catalogGetCatalogColumns
     *
     * Get catalog column list
     *
     * @param string $store_id Your store identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CatalogColumns
     */
    public function catalogGetCatalogColumns($store_id)
    {
        list($response) = $this->catalogGetCatalogColumnsWithHttpInfo($store_id);
        return $response;
    }

    /**
     * Operation catalogGetCatalogColumnsWithHttpInfo
     *
     * Get catalog column list
     *
     * @param string $store_id Your store identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CatalogColumns, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogGetCatalogColumnsWithHttpInfo($store_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling catalogGetCatalogColumns');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/catalogColumns";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CatalogColumns',
                '/v2/user/catalogs/{storeId}/catalogColumns'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CatalogColumns', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CatalogColumns', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation catalogGetCategories
     *
     * Get category list
     *
     * @param string $store_id Your store identifier (required)
     * @param string[] $accept_encoding Indicates that the client accepts that the response will be compressed to reduce traffic size. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Categories
     */
    public function catalogGetCategories($store_id, $accept_encoding)
    {
        list($response) = $this->catalogGetCategoriesWithHttpInfo($store_id, $accept_encoding);
        return $response;
    }

    /**
     * Operation catalogGetCategoriesWithHttpInfo
     *
     * Get category list
     *
     * @param string $store_id Your store identifier (required)
     * @param string[] $accept_encoding Indicates that the client accepts that the response will be compressed to reduce traffic size. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Categories, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogGetCategoriesWithHttpInfo($store_id, $accept_encoding)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling catalogGetCategories');
        }
        // verify the required parameter 'accept_encoding' is set
        if ($accept_encoding === null) {
            throw new \InvalidArgumentException('Missing the required parameter $accept_encoding when calling catalogGetCategories');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/categories";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // header params
        if (is_array($accept_encoding)) {
            $accept_encoding = $this->apiClient->getSerializer()->serializeCollection($accept_encoding, 'csv');
        }
        if ($accept_encoding !== null) {
            $headerParams['Accept-Encoding'] = $this->apiClient->getSerializer()->toHeaderValue($accept_encoding);
        }
        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Categories',
                '/v2/user/catalogs/{storeId}/categories'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Categories', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Categories', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation catalogGetCustomColumnExpression
     *
     * Get the encrypted custom column expression
     *
     * @param string $store_id Your store identifier (required)
     * @param string $column_id The custom column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function catalogGetCustomColumnExpression($store_id, $column_id)
    {
        list($response) = $this->catalogGetCustomColumnExpressionWithHttpInfo($store_id, $column_id);
        return $response;
    }

    /**
     * Operation catalogGetCustomColumnExpressionWithHttpInfo
     *
     * Get the encrypted custom column expression
     *
     * @param string $store_id Your store identifier (required)
     * @param string $column_id The custom column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogGetCustomColumnExpressionWithHttpInfo($store_id, $column_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling catalogGetCustomColumnExpression');
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $column_id when calling catalogGetCustomColumnExpression');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/customColumns/{columnId}/expression";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                "{" . "columnId" . "}",
                $this->apiClient->getSerializer()->toPathValue($column_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/v2/user/catalogs/{storeId}/customColumns/{columnId}/expression'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation catalogGetCustomColumns
     *
     * Get custom column list
     *
     * @param string $store_id Your store identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CustomColumns
     */
    public function catalogGetCustomColumns($store_id)
    {
        list($response) = $this->catalogGetCustomColumnsWithHttpInfo($store_id);
        return $response;
    }

    /**
     * Operation catalogGetCustomColumnsWithHttpInfo
     *
     * Get custom column list
     *
     * @param string $store_id Your store identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CustomColumns, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogGetCustomColumnsWithHttpInfo($store_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling catalogGetCustomColumns');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/customColumns";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CustomColumns',
                '/v2/user/catalogs/{storeId}/customColumns'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CustomColumns', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomColumns', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation catalogGetProduct
     *
     * Get product
     *
     * @param string $store_id Your store identifier (required)
     * @param string $product_id The product identifier you want to get (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Product
     */
    public function catalogGetProduct($store_id, $product_id)
    {
        list($response) = $this->catalogGetProductWithHttpInfo($store_id, $product_id);
        return $response;
    }

    /**
     * Operation catalogGetProductWithHttpInfo
     *
     * Get product
     *
     * @param string $store_id Your store identifier (required)
     * @param string $product_id The product identifier you want to get (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Product, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogGetProductWithHttpInfo($store_id, $product_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling catalogGetProduct');
        }
        // verify the required parameter 'product_id' is set
        if ($product_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_id when calling catalogGetProduct');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/products/{productId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($product_id !== null) {
            $resourcePath = str_replace(
                "{" . "productId" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Product',
                '/v2/user/catalogs/{storeId}/products/{productId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Product', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Product', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation catalogGetProducts
     *
     * Get product list
     *
     * @param string $store_id Your store identifier (required)
     * @param \Swagger\Client\Model\GetProductsRequest $request  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Products
     */
    public function catalogGetProducts($store_id, $request = null)
    {
        list($response) = $this->catalogGetProductsWithHttpInfo($store_id, $request);
        return $response;
    }

    /**
     * Operation catalogGetProductsWithHttpInfo
     *
     * Get product list
     *
     * @param string $store_id Your store identifier (required)
     * @param \Swagger\Client\Model\GetProductsRequest $request  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Products, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogGetProductsWithHttpInfo($store_id, $request = null)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling catalogGetProducts');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/products";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Products',
                '/v2/user/catalogs/{storeId}/products'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Products', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Products', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation catalogGetRandomProducts
     *
     * Get random product list
     *
     * @param string $store_id Your store identifier (required)
     * @param int $count The count of random product you want to get (optional, default to 100)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\Products
     */
    public function catalogGetRandomProducts($store_id, $count = null)
    {
        list($response) = $this->catalogGetRandomProductsWithHttpInfo($store_id, $count);
        return $response;
    }

    /**
     * Operation catalogGetRandomProductsWithHttpInfo
     *
     * Get random product list
     *
     * @param string $store_id Your store identifier (required)
     * @param int $count The count of random product you want to get (optional, default to 100)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\Products, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogGetRandomProductsWithHttpInfo($store_id, $count = null)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling catalogGetRandomProducts');
        }
        if (!is_null($count) && ($count > 100)) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling V2UserCatalogsApi.catalogGetRandomProducts, must be smaller than or equal to 100.');
        }
        if (!is_null($count) && ($count < 25)) {
            throw new \InvalidArgumentException('invalid value for "$count" when calling V2UserCatalogsApi.catalogGetRandomProducts, must be bigger than or equal to 25.');
        }

        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/products/random";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // query params
        if ($count !== null) {
            $queryParams['count'] = $this->apiClient->getSerializer()->toQueryValue($count);
        }
        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\Products',
                '/v2/user/catalogs/{storeId}/products/random'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\Products', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\Products', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation catalogSaveCustomColumn
     *
     * Create or replace a custom column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $column_id The custom column identifier (required)
     * @param \Swagger\Client\Model\CreateCustomColumnRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function catalogSaveCustomColumn($store_id, $column_id, $request)
    {
        list($response) = $this->catalogSaveCustomColumnWithHttpInfo($store_id, $column_id, $request);
        return $response;
    }

    /**
     * Operation catalogSaveCustomColumnWithHttpInfo
     *
     * Create or replace a custom column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $column_id The custom column identifier (required)
     * @param \Swagger\Client\Model\CreateCustomColumnRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function catalogSaveCustomColumnWithHttpInfo($store_id, $column_id, $request)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling catalogSaveCustomColumn');
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $column_id when calling catalogSaveCustomColumn');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling catalogSaveCustomColumn');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/customColumns/{columnId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                "{" . "columnId" . "}",
                $this->apiClient->getSerializer()->toPathValue($column_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/customColumns/{columnId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse409', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationActivateAutoImport
     *
     * Activate the auto importation of the last successful manual catalog importation.
     *
     * @param string $store_id Your store identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function importationActivateAutoImport($store_id)
    {
        list($response) = $this->importationActivateAutoImportWithHttpInfo($store_id);
        return $response;
    }

    /**
     * Operation importationActivateAutoImportWithHttpInfo
     *
     * Activate the auto importation of the last successful manual catalog importation.
     *
     * @param string $store_id Your store identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationActivateAutoImportWithHttpInfo($store_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationActivateAutoImport');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/autoImport";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/autoImport'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationCancel
     *
     * Cancel importation
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function importationCancel($store_id, $execution_id)
    {
        list($response) = $this->importationCancelWithHttpInfo($store_id, $execution_id);
        return $response;
    }

    /**
     * Operation importationCancelWithHttpInfo
     *
     * Cancel importation
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationCancelWithHttpInfo($store_id, $execution_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationCancel');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationCancel');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/importations/{executionId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationCommit
     *
     * Commit Importation
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function importationCommit($store_id, $execution_id)
    {
        list($response) = $this->importationCommitWithHttpInfo($store_id, $execution_id);
        return $response;
    }

    /**
     * Operation importationCommitWithHttpInfo
     *
     * Commit Importation
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationCommitWithHttpInfo($store_id, $execution_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationCommit');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationCommit');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}/commit";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/importations/{executionId}/commit'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationCommitColumns
     *
     * Commit columns
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function importationCommitColumns($store_id, $execution_id)
    {
        list($response) = $this->importationCommitColumnsWithHttpInfo($store_id, $execution_id);
        return $response;
    }

    /**
     * Operation importationCommitColumnsWithHttpInfo
     *
     * Commit columns
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationCommitColumnsWithHttpInfo($store_id, $execution_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationCommitColumns');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationCommitColumns');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}/commitColumns";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/importations/{executionId}/commitColumns'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationConfigureCatalogColumn
     *
     * Configure catalog column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The custom column identifier (required)
     * @param \Swagger\Client\Model\ConfigureCatalogColumnCatalogRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function importationConfigureCatalogColumn($store_id, $execution_id, $column_id, $request)
    {
        list($response) = $this->importationConfigureCatalogColumnWithHttpInfo($store_id, $execution_id, $column_id, $request);
        return $response;
    }

    /**
     * Operation importationConfigureCatalogColumnWithHttpInfo
     *
     * Configure catalog column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The custom column identifier (required)
     * @param \Swagger\Client\Model\ConfigureCatalogColumnCatalogRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationConfigureCatalogColumnWithHttpInfo($store_id, $execution_id, $column_id, $request)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationConfigureCatalogColumn');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationConfigureCatalogColumn');
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $column_id when calling importationConfigureCatalogColumn');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling importationConfigureCatalogColumn');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                "{" . "columnId" . "}",
                $this->apiClient->getSerializer()->toPathValue($column_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationConfigureRemainingCatalogColumns
     *
     * Configure remaining catalog columns
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function importationConfigureRemainingCatalogColumns($store_id, $execution_id)
    {
        list($response) = $this->importationConfigureRemainingCatalogColumnsWithHttpInfo($store_id, $execution_id);
        return $response;
    }

    /**
     * Operation importationConfigureRemainingCatalogColumnsWithHttpInfo
     *
     * Configure remaining catalog columns
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationConfigureRemainingCatalogColumnsWithHttpInfo($store_id, $execution_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationConfigureRemainingCatalogColumns');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationConfigureRemainingCatalogColumns');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}/configureRemainingCatalogColumns";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/importations/{executionId}/configureRemainingCatalogColumns'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationDeleteCustomColumn
     *
     * Delete Custom Column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The custom column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function importationDeleteCustomColumn($store_id, $execution_id, $column_id)
    {
        list($response) = $this->importationDeleteCustomColumnWithHttpInfo($store_id, $execution_id, $column_id);
        return $response;
    }

    /**
     * Operation importationDeleteCustomColumnWithHttpInfo
     *
     * Delete Custom Column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The custom column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationDeleteCustomColumnWithHttpInfo($store_id, $execution_id, $column_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationDeleteCustomColumn');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationDeleteCustomColumn');
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $column_id when calling importationDeleteCustomColumn');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                "{" . "columnId" . "}",
                $this->apiClient->getSerializer()->toPathValue($column_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'DELETE',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationGetCustomColumnExpression
     *
     * Get the encrypted custom column expression in this importation
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The custom column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function importationGetCustomColumnExpression($store_id, $execution_id, $column_id)
    {
        list($response) = $this->importationGetCustomColumnExpressionWithHttpInfo($store_id, $execution_id, $column_id);
        return $response;
    }

    /**
     * Operation importationGetCustomColumnExpressionWithHttpInfo
     *
     * Get the encrypted custom column expression in this importation
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The custom column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationGetCustomColumnExpressionWithHttpInfo($store_id, $execution_id, $column_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationGetCustomColumnExpression');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationGetCustomColumnExpression');
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $column_id when calling importationGetCustomColumnExpression');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/expression";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                "{" . "columnId" . "}",
                $this->apiClient->getSerializer()->toPathValue($column_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/expression'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationGetCustomColumns
     *
     * Get custom columns currently place in this importation
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\CustomColumns
     */
    public function importationGetCustomColumns($store_id, $execution_id)
    {
        list($response) = $this->importationGetCustomColumnsWithHttpInfo($store_id, $execution_id);
        return $response;
    }

    /**
     * Operation importationGetCustomColumnsWithHttpInfo
     *
     * Get custom columns currently place in this importation
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\CustomColumns, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationGetCustomColumnsWithHttpInfo($store_id, $execution_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationGetCustomColumns');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationGetCustomColumns');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\CustomColumns',
                '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\CustomColumns', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\CustomColumns', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationGetDetectedCatalogColumns
     *
     * Get detected catalog columns during this importation.
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\DetectedCatalogColumns
     */
    public function importationGetDetectedCatalogColumns($store_id, $execution_id)
    {
        list($response) = $this->importationGetDetectedCatalogColumnsWithHttpInfo($store_id, $execution_id);
        return $response;
    }

    /**
     * Operation importationGetDetectedCatalogColumnsWithHttpInfo
     *
     * Get detected catalog columns during this importation.
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\DetectedCatalogColumns, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationGetDetectedCatalogColumnsWithHttpInfo($store_id, $execution_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationGetDetectedCatalogColumns');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationGetDetectedCatalogColumns');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\DetectedCatalogColumns',
                '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\DetectedCatalogColumns', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\DetectedCatalogColumns', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationGetImportationMonitoring
     *
     * Get the importation status
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ImportationMonitoring
     */
    public function importationGetImportationMonitoring($store_id, $execution_id)
    {
        list($response) = $this->importationGetImportationMonitoringWithHttpInfo($store_id, $execution_id);
        return $response;
    }

    /**
     * Operation importationGetImportationMonitoringWithHttpInfo
     *
     * Get the importation status
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ImportationMonitoring, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationGetImportationMonitoringWithHttpInfo($store_id, $execution_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationGetImportationMonitoring');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationGetImportationMonitoring');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ImportationMonitoring',
                '/v2/user/catalogs/{storeId}/importations/{executionId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ImportationMonitoring', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ImportationMonitoring', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationGetManualUpdateLastInputConfig
     *
     * Get the last input configuration
     *
     * @param string $store_id Your store identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\LastManualImportInputConfiguration
     */
    public function importationGetManualUpdateLastInputConfig($store_id)
    {
        list($response) = $this->importationGetManualUpdateLastInputConfigWithHttpInfo($store_id);
        return $response;
    }

    /**
     * Operation importationGetManualUpdateLastInputConfigWithHttpInfo
     *
     * Get the last input configuration
     *
     * @param string $store_id Your store identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\LastManualImportInputConfiguration, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationGetManualUpdateLastInputConfigWithHttpInfo($store_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationGetManualUpdateLastInputConfig');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/inputConfiguration";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\LastManualImportInputConfiguration',
                '/v2/user/catalogs/{storeId}/inputConfiguration'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\LastManualImportInputConfiguration', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\LastManualImportInputConfiguration', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationGetProductSample
     *
     * Get the product sample related to this importation with all columns (catalog and custom)
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param int $product_sample_index Index of the product sample. Starting from 0 to 99. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ProductSample
     */
    public function importationGetProductSample($store_id, $execution_id, $product_sample_index)
    {
        list($response) = $this->importationGetProductSampleWithHttpInfo($store_id, $execution_id, $product_sample_index);
        return $response;
    }

    /**
     * Operation importationGetProductSampleWithHttpInfo
     *
     * Get the product sample related to this importation with all columns (catalog and custom)
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param int $product_sample_index Index of the product sample. Starting from 0 to 99. (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ProductSample, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationGetProductSampleWithHttpInfo($store_id, $execution_id, $product_sample_index)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationGetProductSample');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationGetProductSample');
        }
        // verify the required parameter 'product_sample_index' is set
        if ($product_sample_index === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_sample_index when calling importationGetProductSample');
        }
        if (($product_sample_index > 99)) {
            throw new \InvalidArgumentException('invalid value for "$product_sample_index" when calling V2UserCatalogsApi.importationGetProductSample, must be smaller than or equal to 99.');
        }
        if (($product_sample_index < 0)) {
            throw new \InvalidArgumentException('invalid value for "$product_sample_index" when calling V2UserCatalogsApi.importationGetProductSample, must be bigger than or equal to 0.');
        }

        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // path params
        if ($product_sample_index !== null) {
            $resourcePath = str_replace(
                "{" . "productSampleIndex" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_sample_index),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ProductSample',
                '/v2/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ProductSample', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ProductSample', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationGetProductSampleCustomColumnValue
     *
     * Get product sample custom column value related to this importation.
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param int $product_sample_index Index of the product sample. Starting from 0 to 99. (required)
     * @param string $column_id The custom column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return string
     */
    public function importationGetProductSampleCustomColumnValue($store_id, $execution_id, $product_sample_index, $column_id)
    {
        list($response) = $this->importationGetProductSampleCustomColumnValueWithHttpInfo($store_id, $execution_id, $product_sample_index, $column_id);
        return $response;
    }

    /**
     * Operation importationGetProductSampleCustomColumnValueWithHttpInfo
     *
     * Get product sample custom column value related to this importation.
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param int $product_sample_index Index of the product sample. Starting from 0 to 99. (required)
     * @param string $column_id The custom column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationGetProductSampleCustomColumnValueWithHttpInfo($store_id, $execution_id, $product_sample_index, $column_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationGetProductSampleCustomColumnValue');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationGetProductSampleCustomColumnValue');
        }
        // verify the required parameter 'product_sample_index' is set
        if ($product_sample_index === null) {
            throw new \InvalidArgumentException('Missing the required parameter $product_sample_index when calling importationGetProductSampleCustomColumnValue');
        }
        if (($product_sample_index > 99)) {
            throw new \InvalidArgumentException('invalid value for "$product_sample_index" when calling V2UserCatalogsApi.importationGetProductSampleCustomColumnValue, must be smaller than or equal to 99.');
        }
        if (($product_sample_index < 0)) {
            throw new \InvalidArgumentException('invalid value for "$product_sample_index" when calling V2UserCatalogsApi.importationGetProductSampleCustomColumnValue, must be bigger than or equal to 0.');
        }

        // verify the required parameter 'column_id' is set
        if ($column_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $column_id when calling importationGetProductSampleCustomColumnValue');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}/customColumns/{columnId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // path params
        if ($product_sample_index !== null) {
            $resourcePath = str_replace(
                "{" . "productSampleIndex" . "}",
                $this->apiClient->getSerializer()->toPathValue($product_sample_index),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                "{" . "columnId" . "}",
                $this->apiClient->getSerializer()->toPathValue($column_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                'string',
                '/v2/user/catalogs/{storeId}/importations/{executionId}/productSamples/{productSampleIndex}/customColumns/{columnId}'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, 'string', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationGetReportings
     *
     * Get the latest catalog importation reporting
     *
     * @param string $store_id Your store identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ImportationReporting[]
     */
    public function importationGetReportings($store_id)
    {
        list($response) = $this->importationGetReportingsWithHttpInfo($store_id);
        return $response;
    }

    /**
     * Operation importationGetReportingsWithHttpInfo
     *
     * Get the latest catalog importation reporting
     *
     * @param string $store_id Your store identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ImportationReporting[], HTTP status code, HTTP response headers (array of strings)
     */
    public function importationGetReportingsWithHttpInfo($store_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationGetReportings');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ImportationReporting[]',
                '/v2/user/catalogs/{storeId}/importations'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ImportationReporting[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ImportationReporting[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationIgnoreColumn
     *
     * Ignore Column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The custom column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function importationIgnoreColumn($store_id, $execution_id, $column_id)
    {
        list($response) = $this->importationIgnoreColumnWithHttpInfo($store_id, $execution_id, $column_id);
        return $response;
    }

    /**
     * Operation importationIgnoreColumnWithHttpInfo
     *
     * Ignore Column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The custom column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationIgnoreColumnWithHttpInfo($store_id, $execution_id, $column_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationIgnoreColumn');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationIgnoreColumn');
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $column_id when calling importationIgnoreColumn');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/ignore";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                "{" . "columnId" . "}",
                $this->apiClient->getSerializer()->toPathValue($column_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/ignore'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationMapCatalogColumn
     *
     * Map catalog column to a BeezUP column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The catalog column identifier (required)
     * @param \Swagger\Client\Model\MapBeezUPColumnRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function importationMapCatalogColumn($store_id, $execution_id, $column_id, $request)
    {
        list($response) = $this->importationMapCatalogColumnWithHttpInfo($store_id, $execution_id, $column_id, $request);
        return $response;
    }

    /**
     * Operation importationMapCatalogColumnWithHttpInfo
     *
     * Map catalog column to a BeezUP column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The catalog column identifier (required)
     * @param \Swagger\Client\Model\MapBeezUPColumnRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationMapCatalogColumnWithHttpInfo($store_id, $execution_id, $column_id, $request)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationMapCatalogColumn');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationMapCatalogColumn');
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $column_id when calling importationMapCatalogColumn');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling importationMapCatalogColumn');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/map";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                "{" . "columnId" . "}",
                $this->apiClient->getSerializer()->toPathValue($column_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/map'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationMapCustomColumn
     *
     * Map custom column to a BeezUP column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The custom column identifier (required)
     * @param \Swagger\Client\Model\MapBeezUPColumnRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function importationMapCustomColumn($store_id, $execution_id, $column_id, $request)
    {
        list($response) = $this->importationMapCustomColumnWithHttpInfo($store_id, $execution_id, $column_id, $request);
        return $response;
    }

    /**
     * Operation importationMapCustomColumnWithHttpInfo
     *
     * Map custom column to a BeezUP column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The custom column identifier (required)
     * @param \Swagger\Client\Model\MapBeezUPColumnRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationMapCustomColumnWithHttpInfo($store_id, $execution_id, $column_id, $request)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationMapCustomColumn');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationMapCustomColumn');
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $column_id when calling importationMapCustomColumn');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling importationMapCustomColumn');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/map";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                "{" . "columnId" . "}",
                $this->apiClient->getSerializer()->toPathValue($column_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/map'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationReattendColumn
     *
     * Reattend Column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The custom column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function importationReattendColumn($store_id, $execution_id, $column_id)
    {
        list($response) = $this->importationReattendColumnWithHttpInfo($store_id, $execution_id, $column_id);
        return $response;
    }

    /**
     * Operation importationReattendColumnWithHttpInfo
     *
     * Reattend Column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The custom column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationReattendColumnWithHttpInfo($store_id, $execution_id, $column_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationReattendColumn');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationReattendColumn');
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $column_id when calling importationReattendColumn');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/reattend";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                "{" . "columnId" . "}",
                $this->apiClient->getSerializer()->toPathValue($column_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/reattend'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationSaveCustomColumn
     *
     * Create or replace a custom column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The custom column identifier (required)
     * @param \Swagger\Client\Model\ChangeCustomColumnRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function importationSaveCustomColumn($store_id, $execution_id, $column_id, $request)
    {
        list($response) = $this->importationSaveCustomColumnWithHttpInfo($store_id, $execution_id, $column_id, $request);
        return $response;
    }

    /**
     * Operation importationSaveCustomColumnWithHttpInfo
     *
     * Create or replace a custom column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The custom column identifier (required)
     * @param \Swagger\Client\Model\ChangeCustomColumnRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationSaveCustomColumnWithHttpInfo($store_id, $execution_id, $column_id, $request)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationSaveCustomColumn');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationSaveCustomColumn');
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $column_id when calling importationSaveCustomColumn');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling importationSaveCustomColumn');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                "{" . "columnId" . "}",
                $this->apiClient->getSerializer()->toPathValue($column_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'PUT',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationStartManualUpdate
     *
     * Start Manual Import
     *
     * @param string $store_id Your store identifier (required)
     * @param \Swagger\Client\Model\StartManualImportRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\BeezUPCommonLink2[]
     */
    public function importationStartManualUpdate($store_id, $request)
    {
        list($response) = $this->importationStartManualUpdateWithHttpInfo($store_id, $request);
        return $response;
    }

    /**
     * Operation importationStartManualUpdateWithHttpInfo
     *
     * Start Manual Import
     *
     * @param string $store_id Your store identifier (required)
     * @param \Swagger\Client\Model\StartManualImportRequest $request  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\BeezUPCommonLink2[], HTTP status code, HTTP response headers (array of strings)
     */
    public function importationStartManualUpdateWithHttpInfo($store_id, $request)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationStartManualUpdate');
        }
        // verify the required parameter 'request' is set
        if ($request === null) {
            throw new \InvalidArgumentException('Missing the required parameter $request when calling importationStartManualUpdate');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        // body params
        $_tempBody = null;
        if (isset($request)) {
            $_tempBody = $request;
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\BeezUPCommonLink2[]',
                '/v2/user/catalogs/{storeId}/importations'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\BeezUPCommonLink2[]', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 202:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonLink2[]', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\InlineResponse409', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationTechnicalProgression
     *
     * Get technical progression
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return \Swagger\Client\Model\ImportationTechnicalProgression
     */
    public function importationTechnicalProgression($store_id, $execution_id)
    {
        list($response) = $this->importationTechnicalProgressionWithHttpInfo($store_id, $execution_id);
        return $response;
    }

    /**
     * Operation importationTechnicalProgressionWithHttpInfo
     *
     * Get technical progression
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of \Swagger\Client\Model\ImportationTechnicalProgression, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationTechnicalProgressionWithHttpInfo($store_id, $execution_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationTechnicalProgression');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationTechnicalProgression');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}/technicalProgression";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'GET',
                $queryParams,
                $httpBody,
                $headerParams,
                '\Swagger\Client\Model\ImportationTechnicalProgression',
                '/v2/user/catalogs/{storeId}/importations/{executionId}/technicalProgression'
            );

            return [$this->apiClient->getSerializer()->deserialize($response, '\Swagger\Client\Model\ImportationTechnicalProgression', $httpHeader), $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\ImportationTechnicalProgression', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationUnmapCatalogColumn
     *
     * Unmap catalog column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The catalog column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function importationUnmapCatalogColumn($store_id, $execution_id, $column_id)
    {
        list($response) = $this->importationUnmapCatalogColumnWithHttpInfo($store_id, $execution_id, $column_id);
        return $response;
    }

    /**
     * Operation importationUnmapCatalogColumnWithHttpInfo
     *
     * Unmap catalog column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The catalog column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationUnmapCatalogColumnWithHttpInfo($store_id, $execution_id, $column_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationUnmapCatalogColumn');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationUnmapCatalogColumn');
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $column_id when calling importationUnmapCatalogColumn');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/unmap";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                "{" . "columnId" . "}",
                $this->apiClient->getSerializer()->toPathValue($column_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/importations/{executionId}/catalogColumns/{columnId}/unmap'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation importationUnmapCustomColumn
     *
     * Unmap custom column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The custom column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return void
     */
    public function importationUnmapCustomColumn($store_id, $execution_id, $column_id)
    {
        list($response) = $this->importationUnmapCustomColumnWithHttpInfo($store_id, $execution_id, $column_id);
        return $response;
    }

    /**
     * Operation importationUnmapCustomColumnWithHttpInfo
     *
     * Unmap custom column
     *
     * @param string $store_id Your store identifier (required)
     * @param string $execution_id The execution identifier of you catalog importation (required)
     * @param string $column_id The custom column identifier (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function importationUnmapCustomColumnWithHttpInfo($store_id, $execution_id, $column_id)
    {
        // verify the required parameter 'store_id' is set
        if ($store_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $store_id when calling importationUnmapCustomColumn');
        }
        // verify the required parameter 'execution_id' is set
        if ($execution_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $execution_id when calling importationUnmapCustomColumn');
        }
        // verify the required parameter 'column_id' is set
        if ($column_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $column_id when calling importationUnmapCustomColumn');
        }
        // parse inputs
        $resourcePath = "/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/unmap";
        $httpBody = '';
        $queryParams = [];
        $headerParams = [];
        $formParams = [];
        $_header_accept = $this->apiClient->selectHeaderAccept(['application/json']);
        if (!is_null($_header_accept)) {
            $headerParams['Accept'] = $_header_accept;
        }
        $headerParams['Content-Type'] = $this->apiClient->selectHeaderContentType(['application/json']);

        // path params
        if ($store_id !== null) {
            $resourcePath = str_replace(
                "{" . "storeId" . "}",
                $this->apiClient->getSerializer()->toPathValue($store_id),
                $resourcePath
            );
        }
        // path params
        if ($execution_id !== null) {
            $resourcePath = str_replace(
                "{" . "executionId" . "}",
                $this->apiClient->getSerializer()->toPathValue($execution_id),
                $resourcePath
            );
        }
        // path params
        if ($column_id !== null) {
            $resourcePath = str_replace(
                "{" . "columnId" . "}",
                $this->apiClient->getSerializer()->toPathValue($column_id),
                $resourcePath
            );
        }
        // default format to json
        $resourcePath = str_replace("{format}", "json", $resourcePath);

        
        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present
        } elseif (count($formParams) > 0) {
            $httpBody = $formParams; // for HTTP post (form)
        }
        // this endpoint requires API key authentication
        $apiKey = $this->apiClient->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if (strlen($apiKey) !== 0) {
            $headerParams['Ocp-Apim-Subscription-Key'] = $apiKey;
        }
        // make the API Call
        try {
            list($response, $statusCode, $httpHeader) = $this->apiClient->callApi(
                $resourcePath,
                'POST',
                $queryParams,
                $httpBody,
                $headerParams,
                null,
                '/v2/user/catalogs/{storeId}/importations/{executionId}/customColumns/{columnId}/unmap'
            );

            return [null, $statusCode, $httpHeader];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 0:
                    $data = $this->apiClient->getSerializer()->deserialize($e->getResponseBody(), '\Swagger\Client\Model\BeezUPCommonErrorResponseMessage', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }

            throw $e;
        }
    }
}
