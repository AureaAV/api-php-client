<?php
/**
 * ChannelCatalogExportationReporting
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Channel Catalogs
 *
 * This api allows you to manage your channel catalogs.   A channel catalog is an association between your store and a channel.  You will be able to: - map your catalog colums to channel columns. - map your catalog categories to the channel categories and define a cost of this category - configure the general and cost settings of the channel - enable or disable a channel - exclude products using filters for a channel - override product values for a channel - disable or reenable a product on a channel
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ChannelCatalogExportationReporting Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ChannelCatalogExportationReporting implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'channelCatalogExportationReporting';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'exportation_utc_date' => '\DateTime',
        'exportation_duration' => 'string',
        'cache_status' => 'string',
        'exported_product_count' => 'int',
        'client_ip_address' => 'string',
        'client_user_agent' => 'string'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'exportation_utc_date' => 'exportationUtcDate',
        'exportation_duration' => 'exportationDuration',
        'cache_status' => 'cacheStatus',
        'exported_product_count' => 'exportedProductCount',
        'client_ip_address' => 'clientIpAddress',
        'client_user_agent' => 'clientUserAgent'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'exportation_utc_date' => 'setExportationUtcDate',
        'exportation_duration' => 'setExportationDuration',
        'cache_status' => 'setCacheStatus',
        'exported_product_count' => 'setExportedProductCount',
        'client_ip_address' => 'setClientIpAddress',
        'client_user_agent' => 'setClientUserAgent'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'exportation_utc_date' => 'getExportationUtcDate',
        'exportation_duration' => 'getExportationDuration',
        'cache_status' => 'getCacheStatus',
        'exported_product_count' => 'getExportedProductCount',
        'client_ip_address' => 'getClientIpAddress',
        'client_user_agent' => 'getClientUserAgent'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const CACHE_STATUS_ERROR = 'Error';
    const CACHE_STATUS_AVAILABLE = 'Available';
    const CACHE_STATUS_GENERATED_MANUALLY = 'GeneratedManually';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getCacheStatusAllowableValues()
    {
        return [
            self::CACHE_STATUS_ERROR,
            self::CACHE_STATUS_AVAILABLE,
            self::CACHE_STATUS_GENERATED_MANUALLY,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['exportation_utc_date'] = isset($data['exportation_utc_date']) ? $data['exportation_utc_date'] : null;
        $this->container['exportation_duration'] = isset($data['exportation_duration']) ? $data['exportation_duration'] : null;
        $this->container['cache_status'] = isset($data['cache_status']) ? $data['cache_status'] : null;
        $this->container['exported_product_count'] = isset($data['exported_product_count']) ? $data['exported_product_count'] : null;
        $this->container['client_ip_address'] = isset($data['client_ip_address']) ? $data['client_ip_address'] : null;
        $this->container['client_user_agent'] = isset($data['client_user_agent']) ? $data['client_user_agent'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['exportation_utc_date'] === null) {
            $invalid_properties[] = "'exportation_utc_date' can't be null";
        }
        if (!is_null($this->container['exportation_duration']) && !preg_match("/(00:1[5-9])|(00:[2-5][0-9])|(0[1-9]:[0-5][0-9])|(1[0-9]:[0-5][0-9])|(2[0-3]:[0-5][0-9])/", $this->container['exportation_duration'])) {
            $invalid_properties[] = "invalid value for 'exportation_duration', must be conform to the pattern /(00:1[5-9])|(00:[2-5][0-9])|(0[1-9]:[0-5][0-9])|(1[0-9]:[0-5][0-9])|(2[0-3]:[0-5][0-9])/.";
        }

        $allowed_values = ["Error", "Available", "GeneratedManually"];
        if (!in_array($this->container['cache_status'], $allowed_values)) {
            $invalid_properties[] = "invalid value for 'cache_status', must be one of 'Error', 'Available', 'GeneratedManually'.";
        }

        if ($this->container['client_ip_address'] === null) {
            $invalid_properties[] = "'client_ip_address' can't be null";
        }
        if ($this->container['client_user_agent'] === null) {
            $invalid_properties[] = "'client_user_agent' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['exportation_utc_date'] === null) {
            return false;
        }
        if (!preg_match("/(00:1[5-9])|(00:[2-5][0-9])|(0[1-9]:[0-5][0-9])|(1[0-9]:[0-5][0-9])|(2[0-3]:[0-5][0-9])/", $this->container['exportation_duration'])) {
            return false;
        }
        $allowed_values = ["Error", "Available", "GeneratedManually"];
        if (!in_array($this->container['cache_status'], $allowed_values)) {
            return false;
        }
        if ($this->container['client_ip_address'] === null) {
            return false;
        }
        if ($this->container['client_user_agent'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets exportation_utc_date
     * @return \DateTime
     */
    public function getExportationUtcDate()
    {
        return $this->container['exportation_utc_date'];
    }

    /**
     * Sets exportation_utc_date
     * @param \DateTime $exportation_utc_date The exportation UTC date
     * @return $this
     */
    public function setExportationUtcDate($exportation_utc_date)
    {
        $this->container['exportation_utc_date'] = $exportation_utc_date;

        return $this;
    }

    /**
     * Gets exportation_duration
     * @return string
     */
    public function getExportationDuration()
    {
        return $this->container['exportation_duration'];
    }

    /**
     * Sets exportation_duration
     * @param string $exportation_duration The exportation duration. \\ '00:01:00' measn 1 minute.
     * @return $this
     */
    public function setExportationDuration($exportation_duration)
    {

        if (!is_null($exportation_duration) && (!preg_match("/(00:1[5-9])|(00:[2-5][0-9])|(0[1-9]:[0-5][0-9])|(1[0-9]:[0-5][0-9])|(2[0-3]:[0-5][0-9])/", $exportation_duration))) {
            throw new \InvalidArgumentException("invalid value for $exportation_duration when calling ChannelCatalogExportationReporting., must conform to the pattern /(00:1[5-9])|(00:[2-5][0-9])|(0[1-9]:[0-5][0-9])|(1[0-9]:[0-5][0-9])|(2[0-3]:[0-5][0-9])/.");
        }

        $this->container['exportation_duration'] = $exportation_duration;

        return $this;
    }

    /**
     * Gets cache_status
     * @return string
     */
    public function getCacheStatus()
    {
        return $this->container['cache_status'];
    }

    /**
     * Sets cache_status
     * @param string $cache_status The cache status during the exportation
     * @return $this
     */
    public function setCacheStatus($cache_status)
    {
        $allowed_values = array('Error', 'Available', 'GeneratedManually');
        if (!is_null($cache_status) && (!in_array($cache_status, $allowed_values))) {
            throw new \InvalidArgumentException("Invalid value for 'cache_status', must be one of 'Error', 'Available', 'GeneratedManually'");
        }
        $this->container['cache_status'] = $cache_status;

        return $this;
    }

    /**
     * Gets exported_product_count
     * @return int
     */
    public function getExportedProductCount()
    {
        return $this->container['exported_product_count'];
    }

    /**
     * Sets exported_product_count
     * @param int $exported_product_count The exportated product count during this exportation
     * @return $this
     */
    public function setExportedProductCount($exported_product_count)
    {
        $this->container['exported_product_count'] = $exported_product_count;

        return $this;
    }

    /**
     * Gets client_ip_address
     * @return string
     */
    public function getClientIpAddress()
    {
        return $this->container['client_ip_address'];
    }

    /**
     * Sets client_ip_address
     * @param string $client_ip_address The IP address of the client who requests this exportation
     * @return $this
     */
    public function setClientIpAddress($client_ip_address)
    {
        $this->container['client_ip_address'] = $client_ip_address;

        return $this;
    }

    /**
     * Gets client_user_agent
     * @return string
     */
    public function getClientUserAgent()
    {
        return $this->container['client_user_agent'];
    }

    /**
     * Sets client_user_agent
     * @param string $client_user_agent The http header User-Agent sent by the client who requests this operation
     * @return $this
     */
    public function setClientUserAgent($client_user_agent)
    {
        $this->container['client_user_agent'] = $client_user_agent;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


