<?php
/**
 * OrderIndexLovLinks
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketplaces - Orders
 *
 * The features exposed in this API are centered around managing Orders harvested from your configured marketplaces.\\ This includes: - fetching current information (as known by BeezUP) for a single or multiple Orders, - requesting Order harvest to synchronize your marketplaces and BeezUP accounts, - changing BeezUP data and requesting changes to your marketplaces (accepting, shipping, etc), - configuring automatic changes to marketplace based our newly fetched data, - creating and exporting reports for your Orders.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * OrderIndexLovLinks Class Doc Comment
 *
 * @category    Class
 * @description Gives you all the LOV to get the translations realated to operation name, codes, property names and statuses.
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OrderIndexLovLinks implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'orderIndexLovLinks';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'order_change_business_operation_type' => '\Swagger\Client\Model\BeezUPCommonLOVLink3',
        'order_state' => '\Swagger\Client\Model\BeezUPCommonLOVLink3',
        'order_property' => '\Swagger\Client\Model\BeezUPCommonLOVLink3',
        'order_property_posted' => '\Swagger\Client\Model\BeezUPCommonLOVLink3'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'order_change_business_operation_type' => 'orderChangeBusinessOperationType',
        'order_state' => 'orderState',
        'order_property' => 'orderProperty',
        'order_property_posted' => 'orderPropertyPosted'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'order_change_business_operation_type' => 'setOrderChangeBusinessOperationType',
        'order_state' => 'setOrderState',
        'order_property' => 'setOrderProperty',
        'order_property_posted' => 'setOrderPropertyPosted'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'order_change_business_operation_type' => 'getOrderChangeBusinessOperationType',
        'order_state' => 'getOrderState',
        'order_property' => 'getOrderProperty',
        'order_property_posted' => 'getOrderPropertyPosted'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['order_change_business_operation_type'] = isset($data['order_change_business_operation_type']) ? $data['order_change_business_operation_type'] : null;
        $this->container['order_state'] = isset($data['order_state']) ? $data['order_state'] : null;
        $this->container['order_property'] = isset($data['order_property']) ? $data['order_property'] : null;
        $this->container['order_property_posted'] = isset($data['order_property_posted']) ? $data['order_property_posted'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['order_change_business_operation_type'] === null) {
            $invalid_properties[] = "'order_change_business_operation_type' can't be null";
        }
        if ($this->container['order_state'] === null) {
            $invalid_properties[] = "'order_state' can't be null";
        }
        if ($this->container['order_property'] === null) {
            $invalid_properties[] = "'order_property' can't be null";
        }
        if ($this->container['order_property_posted'] === null) {
            $invalid_properties[] = "'order_property_posted' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['order_change_business_operation_type'] === null) {
            return false;
        }
        if ($this->container['order_state'] === null) {
            return false;
        }
        if ($this->container['order_property'] === null) {
            return false;
        }
        if ($this->container['order_property_posted'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets order_change_business_operation_type
     * @return \Swagger\Client\Model\BeezUPCommonLOVLink3
     */
    public function getOrderChangeBusinessOperationType()
    {
        return $this->container['order_change_business_operation_type'];
    }

    /**
     * Sets order_change_business_operation_type
     * @param \Swagger\Client\Model\BeezUPCommonLOVLink3 $order_change_business_operation_type
     * @return $this
     */
    public function setOrderChangeBusinessOperationType($order_change_business_operation_type)
    {
        $this->container['order_change_business_operation_type'] = $order_change_business_operation_type;

        return $this;
    }

    /**
     * Gets order_state
     * @return \Swagger\Client\Model\BeezUPCommonLOVLink3
     */
    public function getOrderState()
    {
        return $this->container['order_state'];
    }

    /**
     * Sets order_state
     * @param \Swagger\Client\Model\BeezUPCommonLOVLink3 $order_state
     * @return $this
     */
    public function setOrderState($order_state)
    {
        $this->container['order_state'] = $order_state;

        return $this;
    }

    /**
     * Gets order_property
     * @return \Swagger\Client\Model\BeezUPCommonLOVLink3
     */
    public function getOrderProperty()
    {
        return $this->container['order_property'];
    }

    /**
     * Sets order_property
     * @param \Swagger\Client\Model\BeezUPCommonLOVLink3 $order_property
     * @return $this
     */
    public function setOrderProperty($order_property)
    {
        $this->container['order_property'] = $order_property;

        return $this;
    }

    /**
     * Gets order_property_posted
     * @return \Swagger\Client\Model\BeezUPCommonLOVLink3
     */
    public function getOrderPropertyPosted()
    {
        return $this->container['order_property_posted'];
    }

    /**
     * Sets order_property_posted
     * @param \Swagger\Client\Model\BeezUPCommonLOVLink3 $order_property_posted
     * @return $this
     */
    public function setOrderPropertyPosted($order_property_posted)
    {
        $this->container['order_property_posted'] = $order_property_posted;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


