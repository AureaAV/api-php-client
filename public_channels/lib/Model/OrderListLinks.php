<?php
/**
 * OrderListLinks
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketplaces - Orders
 *
 * The features exposed in this API are centered around managing Orders harvested from your configured marketplaces.\\ This includes: - fetching current information (as known by BeezUP) for a single or multiple Orders, - requesting Order harvest to synchronize your marketplaces and BeezUP accounts, - changing BeezUP data and requesting changes to your marketplaces (accepting, shipping, etc), - configuring automatic changes to marketplace based our newly fetched data, - creating and exporting reports for your Orders.
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * OrderListLinks Class Doc Comment
 *
 * @category    Class
 * @description The list of actions you can do from the order list response
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class OrderListLinks implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'orderListLinks';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'harvest' => '\Swagger\Client\Model\LinksHarvestAllLink',
        'set_merchant_infos' => '\Swagger\Client\Model\LinksSetMerchantOrderInfoListLink',
        'clear_merchant_infos' => '\Swagger\Client\Model\LinksClearMerchantOrderInfoListLink',
        'export' => '\Swagger\Client\Model\LinksExportOrdersLink',
        'status' => '\Swagger\Client\Model\LinksGetMarketplaceAccountsSynchronizationLink'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'harvest' => 'harvest',
        'set_merchant_infos' => 'setMerchantInfos',
        'clear_merchant_infos' => 'clearMerchantInfos',
        'export' => 'export',
        'status' => 'status'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'harvest' => 'setHarvest',
        'set_merchant_infos' => 'setSetMerchantInfos',
        'clear_merchant_infos' => 'setClearMerchantInfos',
        'export' => 'setExport',
        'status' => 'setStatus'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'harvest' => 'getHarvest',
        'set_merchant_infos' => 'getSetMerchantInfos',
        'clear_merchant_infos' => 'getClearMerchantInfos',
        'export' => 'getExport',
        'status' => 'getStatus'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['harvest'] = isset($data['harvest']) ? $data['harvest'] : null;
        $this->container['set_merchant_infos'] = isset($data['set_merchant_infos']) ? $data['set_merchant_infos'] : null;
        $this->container['clear_merchant_infos'] = isset($data['clear_merchant_infos']) ? $data['clear_merchant_infos'] : null;
        $this->container['export'] = isset($data['export']) ? $data['export'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['harvest'] === null) {
            $invalid_properties[] = "'harvest' can't be null";
        }
        if ($this->container['set_merchant_infos'] === null) {
            $invalid_properties[] = "'set_merchant_infos' can't be null";
        }
        if ($this->container['clear_merchant_infos'] === null) {
            $invalid_properties[] = "'clear_merchant_infos' can't be null";
        }
        if ($this->container['export'] === null) {
            $invalid_properties[] = "'export' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalid_properties[] = "'status' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['harvest'] === null) {
            return false;
        }
        if ($this->container['set_merchant_infos'] === null) {
            return false;
        }
        if ($this->container['clear_merchant_infos'] === null) {
            return false;
        }
        if ($this->container['export'] === null) {
            return false;
        }
        if ($this->container['status'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets harvest
     * @return \Swagger\Client\Model\LinksHarvestAllLink
     */
    public function getHarvest()
    {
        return $this->container['harvest'];
    }

    /**
     * Sets harvest
     * @param \Swagger\Client\Model\LinksHarvestAllLink $harvest
     * @return $this
     */
    public function setHarvest($harvest)
    {
        $this->container['harvest'] = $harvest;

        return $this;
    }

    /**
     * Gets set_merchant_infos
     * @return \Swagger\Client\Model\LinksSetMerchantOrderInfoListLink
     */
    public function getSetMerchantInfos()
    {
        return $this->container['set_merchant_infos'];
    }

    /**
     * Sets set_merchant_infos
     * @param \Swagger\Client\Model\LinksSetMerchantOrderInfoListLink $set_merchant_infos
     * @return $this
     */
    public function setSetMerchantInfos($set_merchant_infos)
    {
        $this->container['set_merchant_infos'] = $set_merchant_infos;

        return $this;
    }

    /**
     * Gets clear_merchant_infos
     * @return \Swagger\Client\Model\LinksClearMerchantOrderInfoListLink
     */
    public function getClearMerchantInfos()
    {
        return $this->container['clear_merchant_infos'];
    }

    /**
     * Sets clear_merchant_infos
     * @param \Swagger\Client\Model\LinksClearMerchantOrderInfoListLink $clear_merchant_infos
     * @return $this
     */
    public function setClearMerchantInfos($clear_merchant_infos)
    {
        $this->container['clear_merchant_infos'] = $clear_merchant_infos;

        return $this;
    }

    /**
     * Gets export
     * @return \Swagger\Client\Model\LinksExportOrdersLink
     */
    public function getExport()
    {
        return $this->container['export'];
    }

    /**
     * Sets export
     * @param \Swagger\Client\Model\LinksExportOrdersLink $export
     * @return $this
     */
    public function setExport($export)
    {
        $this->container['export'] = $export;

        return $this;
    }

    /**
     * Gets status
     * @return \Swagger\Client\Model\LinksGetMarketplaceAccountsSynchronizationLink
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param \Swagger\Client\Model\LinksGetMarketplaceAccountsSynchronizationLink $status
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


