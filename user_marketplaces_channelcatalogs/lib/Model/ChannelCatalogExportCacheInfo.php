<?php
/**
 * ChannelCatalogExportCacheInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Channel Catalogs
 *
 * This api allows you to manage your channel catalogs.   A channel catalog is an association between your store and a channel.  You will be able to: - map your catalog colums to channel columns. - map your catalog categories to the channel categories and define a cost of this category - configure the general and cost settings of the channel - enable or disable a channel - exclude products using filters for a channel - override product values for a channel - disable or reenable a product on a channel
 *
 * OpenAPI spec version: 2.0
 * Contact: support@beezup.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * ChannelCatalogExportCacheInfo Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ChannelCatalogExportCacheInfo implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'channelCatalogExportCacheInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cache_status' => 'string',
        'last_update_utc_date' => '\DateTime',
        'last_content_change_utc_date' => '\DateTime',
        'expiration_utc_date' => '\DateTime'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'cache_status' => 'cacheStatus',
        'last_update_utc_date' => 'lastUpdateUtcDate',
        'last_content_change_utc_date' => 'lastContentChangeUtcDate',
        'expiration_utc_date' => 'expirationUtcDate'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'cache_status' => 'setCacheStatus',
        'last_update_utc_date' => 'setLastUpdateUtcDate',
        'last_content_change_utc_date' => 'setLastContentChangeUtcDate',
        'expiration_utc_date' => 'setExpirationUtcDate'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'cache_status' => 'getCacheStatus',
        'last_update_utc_date' => 'getLastUpdateUtcDate',
        'last_content_change_utc_date' => 'getLastContentChangeUtcDate',
        'expiration_utc_date' => 'getExpirationUtcDate'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cache_status'] = isset($data['cache_status']) ? $data['cache_status'] : null;
        $this->container['last_update_utc_date'] = isset($data['last_update_utc_date']) ? $data['last_update_utc_date'] : null;
        $this->container['last_content_change_utc_date'] = isset($data['last_content_change_utc_date']) ? $data['last_content_change_utc_date'] : null;
        $this->container['expiration_utc_date'] = isset($data['expiration_utc_date']) ? $data['expiration_utc_date'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['cache_status'] === null) {
            $invalid_properties[] = "'cache_status' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['cache_status'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets cache_status
     * @return string
     */
    public function getCacheStatus()
    {
        return $this->container['cache_status'];
    }

    /**
     * Sets cache_status
     * @param string $cache_status The cache status
     * @return $this
     */
    public function setCacheStatus($cache_status)
    {
        $this->container['cache_status'] = $cache_status;

        return $this;
    }

    /**
     * Gets last_update_utc_date
     * @return \DateTime
     */
    public function getLastUpdateUtcDate()
    {
        return $this->container['last_update_utc_date'];
    }

    /**
     * Sets last_update_utc_date
     * @param \DateTime $last_update_utc_date The last update UTC date of the cache
     * @return $this
     */
    public function setLastUpdateUtcDate($last_update_utc_date)
    {
        $this->container['last_update_utc_date'] = $last_update_utc_date;

        return $this;
    }

    /**
     * Gets last_content_change_utc_date
     * @return \DateTime
     */
    public function getLastContentChangeUtcDate()
    {
        return $this->container['last_content_change_utc_date'];
    }

    /**
     * Sets last_content_change_utc_date
     * @param \DateTime $last_content_change_utc_date The last content change UTC date
     * @return $this
     */
    public function setLastContentChangeUtcDate($last_content_change_utc_date)
    {
        $this->container['last_content_change_utc_date'] = $last_content_change_utc_date;

        return $this;
    }

    /**
     * Gets expiration_utc_date
     * @return \DateTime
     */
    public function getExpirationUtcDate()
    {
        return $this->container['expiration_utc_date'];
    }

    /**
     * Sets expiration_utc_date
     * @param \DateTime $expiration_utc_date The expiration UTC date of the cache
     * @return $this
     */
    public function setExpirationUtcDate($expiration_utc_date)
    {
        $this->container['expiration_utc_date'] = $expiration_utc_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


